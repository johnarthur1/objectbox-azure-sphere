#ifndef SENSORDEMOENTITY_BUILDER_H
#define SENSORDEMOENTITY_BUILDER_H

/* Generated by flatcc 0.5.3-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef SENSORDEMOENTITY_READER_H
#include "SensorDemoEntity_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

static const flatbuffers_voffset_t __SensorDemoEntity_required[] = { 0 };
typedef flatbuffers_ref_t SensorDemoEntity_ref_t;
static SensorDemoEntity_ref_t SensorDemoEntity_clone(flatbuffers_builder_t *B, SensorDemoEntity_table_t t);
__flatbuffers_build_table(flatbuffers_, SensorDemoEntity, 5)

#define __SensorDemoEntity_formal_args ,\
  uint64_t v0, float v1, float v2, float v3, uint64_t v4
#define __SensorDemoEntity_call_args ,\
  v0, v1, v2, v3, v4
static inline SensorDemoEntity_ref_t SensorDemoEntity_create(flatbuffers_builder_t *B __SensorDemoEntity_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, SensorDemoEntity, SensorDemoEntity_identifier, SensorDemoEntity_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, SensorDemoEntity_id, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), SensorDemoEntity)
__flatbuffers_build_scalar_field(1, flatbuffers_, SensorDemoEntity_lightIntensity, flatbuffers_float, float, 4, 4, 0.000000f, SensorDemoEntity)
__flatbuffers_build_scalar_field(2, flatbuffers_, SensorDemoEntity_temperature, flatbuffers_float, float, 4, 4, 0.000000f, SensorDemoEntity)
__flatbuffers_build_scalar_field(3, flatbuffers_, SensorDemoEntity_humidity, flatbuffers_float, float, 4, 4, 0.000000f, SensorDemoEntity)
__flatbuffers_build_scalar_field(4, flatbuffers_, SensorDemoEntity_measuredAt, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), SensorDemoEntity)

static inline SensorDemoEntity_ref_t SensorDemoEntity_create(flatbuffers_builder_t *B __SensorDemoEntity_formal_args)
{
    if (SensorDemoEntity_start(B)
        || SensorDemoEntity_id_add(B, v0)
        || SensorDemoEntity_measuredAt_add(B, v4)
        || SensorDemoEntity_lightIntensity_add(B, v1)
        || SensorDemoEntity_temperature_add(B, v2)
        || SensorDemoEntity_humidity_add(B, v3)) {
        return 0;
    }
    return SensorDemoEntity_end(B);
}

static SensorDemoEntity_ref_t SensorDemoEntity_clone(flatbuffers_builder_t *B, SensorDemoEntity_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (SensorDemoEntity_start(B)
        || SensorDemoEntity_id_pick(B, t)
        || SensorDemoEntity_measuredAt_pick(B, t)
        || SensorDemoEntity_lightIntensity_pick(B, t)
        || SensorDemoEntity_temperature_pick(B, t)
        || SensorDemoEntity_humidity_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, SensorDemoEntity_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* SENSORDEMOENTITY_BUILDER_H */
